trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  credentials: 'aws-azure'
  region: 'us-east-1'

steps:
  - checkout: self  
  - task: CloudFormationCreateOrUpdateStack@1
    inputs:
      awsCredentials: $(credentials)
      regionName: $(region)
      stackName: 'dev'
      templateSource: 'file'
      templateFile: '$(Build.Repository.LocalPath)/main.yml'
      templateParametersSource: 'inline'
      templateParameters: |
        [
          {
            "ParameterKey":"Project",
            "ParameterValue":"$(Project)"
          },
          {
            "ParameterKey":"Environment",
            "ParameterValue":"$(Environment)"
          },
          {
            "ParameterKey":"MasterUserPassword",
            "ParameterValue":"$(MasterUserPassword)"
          },
          {
            "ParameterKey":"VPCBlock",
            "ParameterValue":"$(VPCBlock)"
          },
          {
            "ParameterKey":"VPCBlockSub1",
            "ParameterValue":"$(VPCBlockSub1)"
          },
          {
            "ParameterKey":"VPCBlockSub2",
            "ParameterValue":"$(VPCBlockSub2)"
          },
          {
            "ParameterKey":"VPCBlockSub3",
            "ParameterValue":"$(VPCBlockSub3)"
          },
          {
            "ParameterKey":"VPCBlockSub4",
            "ParameterValue":"$(VPCBlockSub4)"
          }
        ]

  - task: TerraformInstaller@1
    inputs:
      terraformVersion: '1.3.5'

  - task: TerraformTaskV4@4
    inputs:
      provider: 'aws'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      backendServiceAWS: $(credentials)
      backendAWSBucketName: 'agricola-tf-state'
      backendAWSKey: 'tf/state/terraform.tfstate'
  - task: TerraformTaskV4@4
    inputs:
      provider: 'aws'
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      environmentServiceNameAWS: $(credentials)

