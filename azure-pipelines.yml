trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  credentials: 'aws-azure'
  region: 'us-east-1'
  helm-alb-uri: 'https://aws.github.io/eks-charts'
  helm-alb-version: '1.4.1'

steps:
  - checkout: self  
  - task: CloudFormationCreateOrUpdateStack@1
    inputs:
      awsCredentials: $(credentials)
      regionName: $(region)
      stackName: 'dev'
      templateSource: 'file'
      templateFile: '$(Build.Repository.LocalPath)/main.yml'
      templateParametersSource: 'inline'
      templateParameters: |
        [
          {
            "ParameterKey":"Project",
            "ParameterValue":"$(Project)"
          },
          {
            "ParameterKey":"Environment",
            "ParameterValue":"$(Environment)"
          },
          {
            "ParameterKey":"MasterUserPassword",
            "ParameterValue":"$(MasterUserPassword)"
          },
          {
            "ParameterKey":"VPCBlock",
            "ParameterValue":"$(VPCBlock)"
          },
          {
            "ParameterKey":"VPCBlockSub1",
            "ParameterValue":"$(VPCBlockSub1)"
          },
          {
            "ParameterKey":"VPCBlockSub2",
            "ParameterValue":"$(VPCBlockSub2)"
          },
          {
            "ParameterKey":"VPCBlockSub3",
            "ParameterValue":"$(VPCBlockSub3)"
          },
          {
            "ParameterKey":"VPCBlockSub4",
            "ParameterValue":"$(VPCBlockSub4)"
          }
        ]

  - task: TerraformInstaller@1
    inputs:
      terraformVersion: '1.3.5'

  - task: AWSShellScript@1
    displayName: 'Pull and deploy Helm Chart'
    inputs:
      awsCredentials: $(credentials)
      regionName: $(region)
      failOnStandardError: true
      scriptType: 'inline'
      inlineScript: |
        echo 'Connect to Amazon EKS cluster'
        aws eks update-kubeconfig --region $(REGION) --name $(PROJECT)-eks-cluster-$(ENVIRONMENT)
        echo 'deploying helm charts'
        pwd
        cd terraform
        terraform init
        echo 'defining non sensitive values as envs'
        export TF_VAR_environment=$(ENVIRONMENT)
        export TF_VAR_project_name=$(PROJECT)
        export TF_VAR_cloudflare_email=$(CLOUDFLAREEMAIL)
        echo 'passing sensitiva values as inline variables'
        terraform apply -auto-approve -lock=false -var="cloudflare_api_key=$(CLOUDFLAREKEY)" -var="sonar_user=$(DBUSER)" -var="sonar_pass=$(DBPASS)"




